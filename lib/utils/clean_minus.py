import os
import numpy as np
import cv2

def is_quadrangle(pts):
    """
    给出4个点坐标，判断能否组成4边行
    :param pts:
    :return:
    """
    x1, y1, x2, y2, x3, y3, x4, y4 = pts

    gradient_list = []

    if (x2 - x1 + 0.0) == 0:
        gradient_list.append('e')
    else:
        gradient_list.append((y2 - y1) / (x2 - x1 + 0.0))

    if (x3 - x2 + 0.0) == 0:
        gradient_list.append('e')
    else:
        gradient_list.append((y3 - y2) / (x3 - x2 + 0.0))

    if (x4 - x3 + 0.0) == 0:
        gradient_list.append('e')
    else:
        gradient_list.append((y4 - y3) / (x4 - x3 + 0.0))

    if (x1 - x4 + 0.0) == 0:
        gradient_list.append('e')
    else:
        gradient_list.append((y1 - y4) / (x1 - x4 + 0.0))
    # gradient_list.append((y1 - y4) / (x1 - x4 + 0.0))

    for i in range(4):
        if gradient_list[i] == gradient_list[i-1]:
            print(gradient_list)
            return False
    return True


if __name__ == "__main__":

    label_dir = '/home/zzh/ocr/dataset/ikkyyu_data/v8/label'

    label_file_list = os.listdir(label_dir)

    for label_name in label_file_list:
        with open(os.path.join(label_dir, label_name), 'r') as f:
            lines = f.readlines()

        with open(os.path.join(label_dir, label_name), 'w') as f:
            for line in lines:
                x1, y1, x2, y2, x3, y3, x4, y4, cls = line.split(',')
                x1 = (max(int(x1), 0))
                y1 = (max(int(y1), 0))
                x2 = (max(int(x2), 0))
                y2 = (max(int(y2), 0))
                x3 = (max(int(x3), 0))
                y3 = (max(int(y3), 0))
                x4 = (max(int(x4), 0))
                y4 = (max(int(y4), 0))
                if is_quadrangle([x1, y1, x2, y2, x3, y3, x4, y4]):
                    new_line = str(x1) + ',' +str(y1) + ',' +str(x2) + ',' +str(y2) + ',' +str(x3) + ',' +str(y3) + ',' +str(x4) + ',' +str(y4) + ',' +cls
                    f.writelines(new_line)
                else:
                    print(label_name)
                    print([x1, y1, x2, y2, x3, y3, x4, y4])
    #
    # img = np.zeros((1000, 1000, 3), np.uint8)
    # cv2.polylines(img, [np.array([[845, 502], [831, 549], [921, 549], [932, 509]])], True, (255, 0, 0))
    # cv2.imshow('img', img)
    # cv2.waitKey(0)
"""
IMG_5049.txt
[42, 97, 132, 98, 236, 98, 234, 125]
IMG_20180904_181011.txt
[2338, 1723, 2527, 1714, 2527, 1714, 2513, 1880]
IMG_3405.txt
[518, 991, 517, 1042, 605, 1042, 620, 991]
IMG_3406.txt
[845, 502, 831, 549, 921, 549, 932, 509]
IMG_2383.txt
[1294, 3436, 1290, 3503, 1478, 3503, 1487, 3440]
IMG_20180904_180657 (2).txt
[2217, 523, 2204, 572, 2028, 572, 2032, 515]
IMG_20180904_180657 (2).txt
[837, 1925, 828, 1978, 599, 1978, 612, 1917]
IMG_20180904_180657 (2).txt
[2225, 1216, 2208, 1269, 2023, 1269, 2045, 1203]
IMG_20180904_180657 (2).txt
[2393, 2388, 2393, 2446, 2041, 2446, 2049, 2380]
IMG_20180904_180657 (2).txt
[1670, 3262, 1644, 3323, 1331, 3323, 1339, 3249]
IMG_20180904_180657 (2).txt
[2270, 1904, 2248, 2014, 2446, 2014, 2450, 1900]
IMG_20180904_180657 (2).txt
[2230, 1198, 2204, 1290, 2331, 1290, 2349, 1194]
IMG_5026.txt
[497, 266, 488, 294, 556, 294, 564, 261]
IMG_20180904_180739.txt
[1573, 2598, 1546, 2646, 1216, 2646, 1229, 2576]
IMG_20180904_180739.txt
[2265, 3178, 2257, 3293, 2464, 3293, 2433, 3161]
IMG_5040.txt
[135, 313, 144, 343, 183, 343, 189, 309]
IMG_5040.txt
[151, 237, 159, 262, 183, 262, 185, 235]
IMG_5040.txt
[154, 177, 150, 210, 196, 210, 214, 177]
IMG_5040.txt
[320, 319, 316, 346, 360, 346, 362, 317]
IMG_5040.txt
[521, 275, 517, 302, 561, 302, 569, 268]
IMG_2384.txt
[2419, 3185, 2419, 3261, 2840, 3261, 2831, 3189]
IMG_3410.txt
[292, 642, 287, 664, 233, 664, 230, 642]
IMG_3410.txt
[568, 685, 561, 707, 493, 707, 509, 682]
IMG_3410.txt
[859, 729, 855, 751, 782, 751, 783, 726]
IMG_5037.txt
[495, 470, 491, 504, 507, 504, 512, 467]
IMG_20180904_180921.txt
[1520, 1650, 1608, 1659, 1562, 1765, 1516, 1714]
IMG_20180904_180731.txt
[850, 3240, 820, 3372, 912, 3372, 974, 3240]
IMG_20180904_180731.txt
[2266, 3006, 2222, 3120, 2393, 3120, 2371, 3010]
IMG_20180904_180731.txt
[2125, 1202, 2142, 1326, 2239, 1326, 2221, 1185]
IMG_3407.txt
[611, 852, 608, 874, 519, 874, 518, 851]
IMG_3407.txt
[942, 1179, 941, 1195, 817, 1195, 816, 1168]
IMG_3407.txt
[916, 994, 916, 1043, 996, 1043, 1015, 994]
IMG_3407.txt
[321, 303, 320, 351, 384, 351, 402, 287]
IMG_20180904_180714 (2).txt
[793, 629, 797, 678, 573, 678, 599, 621]
IMG_20180904_180714 (2).txt
[2207, 515, 2185, 568, 2014, 568, 2040, 507]
IMG_20180904_180714 (2).txt
[797, 1449, 793, 1502, 604, 1502, 617, 1441]
IMG_20180904_180714 (2).txt
[2208, 489, 2191, 590, 2301, 590, 2345, 493]
IMG_3409.txt
[626, 669, 625, 692, 557, 692, 558, 670]
IMG_3409.txt
[671, 919, 667, 947, 559, 947, 560, 918]
IMG_3409.txt
[355, 1027, 347, 1051, 252, 1051, 257, 1026]
IMG_3409.txt
[932, 571, 923, 595, 848, 595, 849, 570]
IMG_3409.txt
[980, 1175, 974, 1198, 868, 1198, 871, 1175]
IMG_3409.txt
[938, 1352, 982, 1352, 960, 1386, 938, 1381]
IMG_3409.txt
[621, 462, 621, 508, 738, 508, 740, 461]
IMG_3409.txt
[631, 759, 620, 801, 734, 801, 743, 760]
IMG_3409.txt
[625, 277, 626, 325, 711, 325, 729, 268]
"""